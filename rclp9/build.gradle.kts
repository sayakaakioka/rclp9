/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.5/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the java-library plugin for API and implementation separation.
    `java-library`

    // apply eclipse plugin to generate .classpath
    `eclipse`
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation(libs.junit.jupiter)

    testRuntimeOnly("org.junit.platform:junit-platform-launcher")

    // This dependency is exported to consumers, that is to say found on their compile classpath.
    //api(libs.commons.math3)

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation(libs.guava)

    // Processing core libraries
    implementation(files("libs/core.jar"))

    // https://mvnrepository.com/artifact/org.apache.commons/commons-lang3
    implementation("org.apache.commons:commons-lang3:3.14.0")
}

java{
    toolchain{
        // The message, "Path for java installation '/usr/lib/jvm/openjdk-17' (Common Linux Locations)
        // does not contain a java executable", is an expected behavior.
        //languageVersion.set(JavaLanguageVersion.of(17))
    }
}

tasks.withType<JavaCompile> {
    options.compilerArgs.addAll(listOf("-Xlint:deprecation", "-Xdiags:verbose"))
}

tasks.withType<Test> {
    systemProperty("java.library.path", "${projectDir}/libs/rclp9:${projectDir}/libs/ros:${projectDir}/libs")
}

tasks.named("jar") {
    doLast {
        // copy rclp9 folder into your sketchbook/libraries
        val target_dir = "${projectDir}/build/rclp9/library"
        exec {
            commandLine("/usr/bin/mkdir", "-p", target_dir)
        }

        copy {
            from("${projectDir}/build/libs")
            into(target_dir)
            include("*.jar")
        }

        copy {
            from("${projectDir}/libs/ros")
            from("${projectDir}/libs/rclp9")
            into(target_dir)
            include("lib*")
        }
    }
}

tasks.named<Delete>("clean"){
    doLast {
        project.delete("${projectDir}/libs/rclp9")
        project.delete("${projectDir}/libs/ros")
    }
}

tasks.named("compileJava"){
    doLast {
        exec{
            // Because gradle doesn't support linux aarch64 ...
            commandLine("${projectDir}/src/main/python/nativelib_builder.py")
        }
    }
}

tasks.named<Test>("test") {
    useJUnitPlatform()
}



